program:			[externalDeclaration]
	external-declaration
	external-declaration program

external-declaration:		externalDeclaration
	declaration
	function-definition

declaration:			declaration
	int declarator-list ;

declarator-list:		[declarator]
	declarator
	declarator-list , declarator-list

declarator:			declarator
	identifier

function-definition:		function
	int declarator ( parameter-type-list opt ) compound-statement

parameter-type-list:   	 	[parameter-declaration]
	parameter-declaration
	parameter-type-list , parameter-declaration

parameter-declaration:		prameter-declaration
	int declarator

statement:			statement
	;
	expression ;
	compound-statement
	if ( expression ) statement
	if ( expression ) statement else statement
	while ( expression ) statement
	return expression ;

compound-statement:		compound
	{ declaration-list opt statement-list opt }

declaration-list:	       	[declaration]
	declaration
	declaration-list declaration

statement-list:			[statement]
	statement
	statement-list statement
o
expression:			[assign-expr]
	assign-expr
	expression , assign-expr
o
assign-expr:
	logical-OR-expr
	identifier = assign-expr
o
logical-OR-expr:		
	logical-AND-expr
	logical-OR-expr || logical-AND-expr
o
logical-AND-expr:
	equality-expr
	logical-AND-expr && equality-expr
o
equality-expr:
	relational-expr
	equality-expr == relational-expr
	equality-expr != relational-expr
o
relational-expr:
	add-expr
	relational-expr < add-expr
	relational-expr > add-expr
	relational-expr <= add-expr
	relational-expr >= add-expr
o
add-expr:
	mult-expr
	add-expr + mult-expr
	add-expr - mult-expr
o
mult-expr:
	unary-expr
	mult-expr * unary-expr
	mult-expr / unary-expr
o
unary-expr:
	postfix-expr
	- unary-expr
*
postfix-expr:
	primary-expr
	identifier ( argument-expression-list opt )
*
primary-expr:
	identifier
	constant
	( expression )

argument-expression-list:
	assign-expr
	argument-expression-list , assign-expr

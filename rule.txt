program:
	external-declaration
	external-declaration program

external-declaration:
	declaration
	function-definition

declaration:
	int declarator-list ;

initialised-declarator:
	declarator( = exprssion)?

declarator-list:
	(initialised-declarator ( , initialised-declarator)*)?

declarator:
	identifier

function-definition:
	int declarator ( parameter-type-list opt ) compound-statement

parameter-type-list:
	parameter-declaration
	parameter-type-list , parameter-declaration

parameter-declaration:
	int declarator

statement:
	;
	expression ;
	compound-statement
	if ( expression ) statement
	if ( expression ) statement else statement
	while ( expression ) statement
	for ( expression ; expression ; expression )
	return expression ;

compound-statement:
	{ declaration-list statement-list }

declaration-list:
	(declaration ( declaration)*)?

statement-list:
	(statement ( statement)*)?

expression:
	(ternary-expr ( , ternary-expr)*)?

ternary-expr:
	assign-expr
	assign-expr ? assign-expr : assign-expr

assign-expr:
	logical-OR-expr
	identifier = assign-expr
	identifier += assign-expr
	identifier -= assign-expr
	identifier *= assign-expr
	identifier /= assign-expr
	identifier %= assign-expr

logical-OR-expr:		
	logical-AND-expr
	logical-OR-expr || logical-AND-expr

logical-AND-expr:
	equality-expr
	logical-AND-expr && equality-expr

equality-expr:
	relational-expr
	equality-expr == relational-expr
	equality-expr != relational-expr

relational-expr:
	add-expr
	relational-expr < add-expr
	relational-expr > add-expr
	relational-expr <= add-expr
	relational-expr >= add-expr

add-expr:
	mult-expr
	add-expr + mult-expr
	add-expr - mult-expr

mult-expr:
	unary-expr
	mult-expr * unary-expr
	mult-expr / unary-expr

unary-expr:
	postfix-expr
	- unary-expr

postfix-expr:
	primary-expr
	identifier ( argument-expression-list )

primary-expr:
	identifier
	constant
	( expression )

argument-expression-list:
	(assign-expr ( , assign-expr)*)?
